PREFIX drcs:     <http://nie-ine.org/projects/lombardus>
PREFIX fuseki:  <http://jena.apache.org/fuseki#>
PREFIX rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs:    <http://www.w3.org/2000/01/rdf-schema#>
PREFIX tdb2:    <http://jena.apache.org/2016/tdb#>
PREFIX ja:      <http://jena.hpl.hp.com/2005/11/Assembler#>
PREFIX perm:    <http://apache.org/jena/permissions/Assembler#>


## Ontologies
#<#agent>  ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/agent-ontology.ttl> ] ;
#<#cath-o> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/catholic-orders-ontology.ttl> ] ;
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/catholic-organization-ontology.ttl> ] ;
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/concept-ontology.ttl> ] ;
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/creating-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/datatypes-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/device-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/document-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/event-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/human-geography-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/human-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/image-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/indology-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/information-carrier-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/language-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/letter-corresponding-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/linguistic-morphology-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/linguistics-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/literature-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/logic-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/mathematics-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/note-structure-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/organization-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/philosophies-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/philosophy-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/physical-entity-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/physical-geography-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/prosodic-structure-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/publishing-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/scholarly-editing-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/scholasticism-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/teaching-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/text-editing-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/text-expression-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/text-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/text-structure-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Generic-ontologies/time-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Project-ontologies/Atharvaveda-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Project-ontologies/Conrad-Ferdinand-Meyer-correspondence-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Project-ontologies/Friedrich-lombardus-late-work-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Project-ontologies/Heinrich-Woelfflin-collected-works-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Project-ontologies/Jacques-Delille-poetry-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Project-ontologies/Johann-Caspar-Lavater-correspondence-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Project-ontologies/Joseph-Dietrich-monastery-diary-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Project-ontologies/Kuno-Raeber-lyric-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Project-ontologies/Petrus-Lombardus-sentences-ontology.ttl> .
##<#skos> ja:content [ja:externalContent <file:../Ontologies/Nie-ontologies/Project-ontologies/Wolfram-von-Eschenbach-Parzival-ontology.ttl> .


##
## Load the SecuredAssembler class from the permissions library and define 
## the perm:Model as a subclass of ja:NamedModel.
##
[] ja:loadClass    "org.apache.jena.permissions.SecuredAssembler" .
perm:Model       rdfs:subClassOf  ja:NamedModel .

##
## Define the base model that contains the unsecured data.
##
drcs:baseModel rdf:type tdb2:DatasetTDB2 ;
    tdb2:location "tdb-data/lombardus-data" 
    .   

##
## Define the secured model.  This is where permissions is applied to the 
## drcs:baseModel to create a model that has permission restrictions.  Note 
## that it is using the security evaluator implementation (perm:evaluatorImpl) 
## called drcs:secEvaluator which we will define next.
##

drcs:securedModel rdf:type perm:Model ;
    perm:baseModel drcs:baseModel ;
    ja:modelName "https://nie-ine.org/lombardus/securedModel" ;
    perm:evaluatorImpl drcs:secEvaluator .
  
##
## Define the security evaluator.  This is where we use the example 
## ShiroExampleEvaluator.  For your production environment you will replace 
## "org.apache.jena.permissions.example.ShiroExampleEvaluator"  with your 
## SecurityEvaluator implementation.  Note that  ShiroExampleEvaluator constructor 
## takes a Model argument.  We pass in the unsecured baseModel so that the evaluator 
## can read it unencumbered.  Your implementation of SecurityEvaluator may have different 
## parameters to meet your specific needs.
## 

drcs:secEvaluator rdf:type perm:Evaluator ;
    perm:args [  
        rdf:_1 drcs:baseModel ;
    ] ;
    perm:evaluatorClass "org.apache.jena.permissions.example.ShiroExampleEvaluator" .

##
## Define the dataset that we will use for in the server.
## Here we will define THE PERSISTENT STORAGE IN THE GIVEN location. 
## tdb2:location "tdb/lombardus-data" will create the directory ./lombardus-data/ and where all triples are stored persistently
##

drcs:persistent_dataset rdf:type tdb2:DatasetTDB2 ;
    tdb2:location "tdb-data/lombardus-data" ;
    ja:defaultGraph drcs:securedModel;
   .

##
## Define the fuseki:Server.
##
## with time outs:
## Format 1: "1000" -- 1 second timeout
## Format 2: "10000,60000" -- 10s timeout to first result, then 60s timeout to for rest of query.

drcs:fuseki rdf:type fuseki:Server ;
    ja:context [ 
                ja:cxtName "arq:queryTimeout" ; 
                ja:cxtValue "30000,60000" ] ;
    # fuseki:allowedUsers    "lombardus_user";
    fuseki:services (
      drcs:dataService
      drcs:readOnlyService
    ) .

## DEFINING THE DATA SERVICES AND THE ENDPOINTS
## Define the service for the fuseki:Service.  Note that the fuseki:dataset served by 
## this server is the secured dataset defined above.    
## 

drcs:dataService rdf:type fuseki:Service ;
    rdfs:label                      "TDB2 Service for lombardus (RW)" ;
    fuseki:name                     "lombardus-rw" ; # The url of the endpoint: http://host:port/lombardus-rw/
    fuseki:serviceQuery             "query" ;
    fuseki:serviceQuery             "sparql" ;
    fuseki:serviceUpdate            "update" ;
    fuseki:serviceUpload            "upload" ;
    fuseki:serviceReadWriteGraphStore      "data" ;
    # A separate read-only graph store endpoint:
    fuseki:serviceReadGraphStore       "get" ;
    fuseki:dataset           drcs:persistent_dataset ;
    .

##
## The separate read only endpoint to the lombardus data. It is consuming the same drcs:persistent_dataset, but has no restrictions 
## in shiro.ini, so no credentials needed to access.
## allowed are only the following options: query, get
##

drcs:readOnlyService rdf:type fuseki:Service ;
    rdfs:label                      "TDB2 readOnly service for the lombardus project" ;
    fuseki:name                     "lombardus" ; # The url of the endpoint: http://host:port/lombardus
    fuseki:serviceQuery             "query" ;
    fuseki:serviceReadGraphStore    "get" ;
    fuseki:dataset                  drcs:persistent_dataset ;
    .